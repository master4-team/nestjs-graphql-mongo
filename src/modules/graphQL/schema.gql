# ------------------------------------------------------
# THIS FILE WAS AUTOMATICALLY GENERATED (DO NOT MODIFY)
# ------------------------------------------------------

type UserModel {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  name: String!
  email: String
  phone: String
  username: String!
  role: Role!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

enum Role {
  ADMIN
  USER
  ROOT
}

type UserModelBasePayload {
  data: UserModelDataUnionType!
}

union UserModelDataUnionType = UserModel | UserModelRecordDeleteResult

type UserModelRecordDeleteResult {
  acknowledged: Boolean!
  deletedCount: Float!
}

type UserPayload {
  data: UserModelDataUnionType!
}

type RefreshTokenPayload {
  data: RefreshTokenModelDataUnionType!
}

union RefreshTokenModelDataUnionType = RefreshTokenModel | RefreshTokenModelRecordDeleteResult

type RefreshTokenModel {
  _id: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  refreshToken: String!
  iv: String!
  userId: String!
  refreshExpiresIn: DateTime!
  accessToken: String!
  user: UserModel
}

type RefreshTokenModelRecordDeleteResult {
  acknowledged: Boolean!
  deletedCount: Float!
}

type LoginPayload {
  data: RefreshTokenModelDataUnionType!
}

type RegisterPayload {
  data: UserModelDataUnionType!
}

input UserInput {
  name: String!
  email: String
  phone: String
  username: String!
  role: Role!
}

type Query {
  findUserModelById(_id: String!): UserModel
  findOneUserModel(where: UserModelFilter, sort: UserModelSort): UserModel
  findManyUserModel(where: UserModelFilter, sort: UserModelSort, skip: Int = 0, limit: Int): [UserModel!]!
  countUserModel(where: UserModelFilter): Int
  updateUserModelById(_id: String!, record: UserModelUpdateArg!): UserModelBasePayload!
  removeUserModelById(_id: String!): UserModelBasePayload!
  hello: String!
  getProfile: UserPayload!
}

input UserModelFilter {
  _ids: [ID!]
  AND: UserModelFilter
  OR: UserModelFilter
  _search: String
  _id: ID
  _operators: UserModelFilterOperator
  createdAt: DateTime
  updatedAt: DateTime
  email: String
}

input UserModelFilterOperator {
  _id: IDOperatorArgs
  createdAt: DateOperatorArgs
  updatedAt: DateOperatorArgs
  email: StringOperatorArgs
}

input IDOperatorArgs {
  in: [ID!]
  nin: [ID!]
}

input DateOperatorArgs {
  gt: DateTime
  gte: DateTime
  lt: DateTime
  lte: DateTime
}

input StringOperatorArgs {
  in: [String!]
  nin: [String!]
}

input UserModelSort {
  _id: SortDirection
  createdAt: SortDirection
  updatedAt: SortDirection
  email: SortDirection
}

enum SortDirection {
  ASC
  DESC
}

input UserModelUpdateArg {
  _id: ID
  createdAt: DateTime
  updatedAt: DateTime
  name: String
  email: String
  phone: String
  username: String
  role: Role
}

type Mutation {
  updateProfile(name: String!, email: String!, phone: String!): UserPayload!
  changePassword(oldPassword: String!, newPassword: String!): UserPayload!
  login(username: String!, password: String!): LoginPayload!
  register(data: RegisterInput!): RegisterPayload!
  refresh(accessToken: String!, refreshToken: String!): RefreshTokenPayload!
  revoke: RefreshTokenPayload!
}

input RegisterInput {
  username: String!
  name: String!
  email: String
  phone: String
  password: String!
}